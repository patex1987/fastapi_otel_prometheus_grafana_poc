version: "3.7"
services:
  fastapi:
    build:
      context: manually_instrumented_fastapi_service
      dockerfile: Dockerfile
      target: production
    environment:
      - ENV=production
    env_file:
      - ./configuration/manually_instrumented_fastapi_service/development.env
    ports:
      - "8000:8000"
    networks:
      - monitoring
    command:
      # TODO: use app factory
      ["uvicorn", "manage:entry_point", "--host", "0.0.0.0", "--port", "8000"]

  collector:
    image: otel/opentelemetry-collector:latest
    volumes:
      - ./otel_collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command:
      [
        "--config=/etc/otel-collector-config.yaml",
      ]
    ports:
      - "4317:4317"  # OTLP receiver (grpc)
      - "4318:4318"  # OTLP receiver (http)
      - "8889:8889"  # Prometheus metrics
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - monitoring
  
  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo
    networks:
      - monitoring

  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin
    networks:
      - monitoring
    depends_on:
      - init


networks:
  monitoring:
    driver: bridge

